from random import seed, randrange, random
import csv
import numpy as np
from math import exp
from sklearn.metrics import confusion_matrix, cohen_kappa_score

# Load a CSV file
def loadCsv(filename):
    trainSet = []
    with open(filename, 'r') as file:
        lines = csv.reader(file)
        dataset = list(lines)
        for i in range(len(dataset)):
            for j in range(4):
                dataset[i][j] = float(dataset[i][j])
            trainSet.append(dataset[i])
    return trainSet

# Rescale dataset columns to the range 0-1
def normalize(dataset, minmax):
    for row in dataset:
        for i in range(len(row) - 1):
            row[i] = (row[i] - minmax[i][0]) / (minmax[i][1] - minmax[i][0])

# Convert string column to float
def column_to_float(dataset, column):
    for row in dataset:
        try:
            row[column] = float(row[column])
        except ValueError:
            print("Error with row", column, ":", row[column])
            pass

# Convert string column to integer
def column_to_int(dataset, column):
    class_values = [row[column] for row in dataset]
    unique = set(class_values)
    lookup = dict()
    for i, value in enumerate(unique):
        lookup[value] = i
    for row in dataset:
        row[column] = lookup[row[column]]
    return lookup

# Split a dataset into k folds
def cross_validation_split(dataset, n_folds):
    dataset_split = []
    dataset_copy = list(dataset)
    fold_size = int(len(dataset) / n_folds)
    for i in range(n_folds):
        fold = []
        while len(fold) < fold_size:
            index = randrange(len(dataset_copy))
            fold.append(dataset_copy.pop(index))
        dataset_split.append(fold)
    return dataset_split

# Calculate accuracy percentage
def accuracy_met(actual, predicted):
    correct = 0
    for i in range(len(actual)):
        if actual[i] == predicted[i]:
            correct += 1
    return correct / float(len(actual)) * 100.0

# Evaluate an algorithm using a cross-validation split
def run_algorithm(dataset, algorithm, n_folds, *args):
    folds = cross_validation_split(dataset, n_folds)
    scores = []
    for fold in folds:
        train_set = list(folds)
        train_set.remove(fold)
        train_set = sum(train_set, [])
        test_set = list()
        for row in fold:
            row_copy = list(row)
            test_set.append(row_copy)
            row_copy[-1] = None
        predicted = algorithm(train_set, test_set, *args)
        actual = [row[-1] for row in fold]
        accuracy = accuracy_met(actual, predicted)
        cm = confusion_matrix(actual, predicted)
        print('\n'.join([''.join(['{:4}'.format(item) for item in row]) for row in cm]))
        FP = cm.sum(axis=0) - np.diag(cm)
        FN = cm.sum(axis=1) - np.diag(cm)
        TP = np.diag(cm)
        TN = cm.sum() - (FP + FN + TP)
        print('False Positives\n', FP)
        print('False Negetives\n', FN)
        print('True Positives\n', TP)
        print('True Negetives\n', TN)
        TPR = TP / (TP + FN)
        print('Sensitivity \n', TPR)
        TNR = TN / (TN + FP)
        print('Specificity \n', TNR)
        Precision = TP / (TP + FP)
        print('Precision \n', Precision)
        Recall = TP / (TP + FN)
        print('Recall \n', Recall)
        Acc = (TP + TN) / (TP + TN + FP + FN)
        print('Áccuracy \n', Acc)
        Fscore = 2 * (Precision * Recall) / (Precision + Recall)
        print('FScore \n', Fscore)
        k = cohen_kappa_score(actual, predicted)
        print('Cohen Kappa \n', k)
        scores.append(accuracy)
    return scores

# Calculate neuron activation for an input
def activate(weights, inputs):
    activation = weights[-1]
    for i in range(len(weights) - 1):
        activation += weights[i] * inputs[i]
    return activation

# Transfer neuron activation
def transfer(activation, k0, k1):
    return k0 + k1 * activation

# Forward propagate input to a network output
def forward_propagate(network, row):
    inputs = row
    for layer in network:
        new_inputs = []
        for neuron in layer:
            activation = activate(neuron['weights'], inputs)
            if layer != network[-1]:
                neuron['output'] = transfer(activation, neuron['k'][0], neuron['k'][1])
            else:
                neuron['output'] = transfer(activation, neuron['k'][0], neuron['k'][1])
            new_inputs.append(neuron['output'])
        inputs = new_inputs
    return inputs

# Calculate the derivative of a neuron output
def transfer_derivative(output, k1):
    return k1

# Backpropagate error and store in neurons
def backward_propagate_error(network, expected):
    for i in reversed(range(len(network))):
        layer = network[i]
        errors = []
        if i != len(network) - 1:
            for j in range(len(layer)):
                error = 0.0
                for neuron in network[i + 1]:
                    error += (neuron['weights'][j] * neuron['delta'])
                errors.append(error)
        else:
            for j in range(len(layer)):
                neuron = layer[j]
                errors.append(expected[j] - neuron['output'])
        for j in range(len(layer)):
            neuron = layer[j]
            neuron['delta'] = errors[j] * transfer_derivative(neuron['output'], neuron['k'][1])

# Update network weights with error
def update_weights(network, row, l_rate):
    for i in range(len(network)):
        inputs = row[:-1]
        if i != 0:
            inputs = [neuron['output'] for neuron in network[i - 1]]
        for neuron in network[i]:
            for j in range(len(inputs)):
                temp = l_rate * neuron['delta'] * inputs[j]
                neuron['weights'][j] += temp
            temp = l_rate * neuron['delta']
            neuron['weights'][-1] += temp
            neuron['k'][0] += l_rate * neuron['delta']
            neuron['k'][1] += l_rate * neuron['delta'] * neuron['output']

# Train a network for a fixed number of epochs
def train_network(network, train, l_rate, n_epoch, n_outputs):
    for epoch in range(n_epoch):
        for row in train:
            outputs = forward_propagate(network, row)
            expected = [0 for i in range(n_outputs)]
            expected[int(row[-1])] = 1
            backward_propagate_error(network, expected)
            update_weights(network, row, l_rate)

# Initialize a network
def initialize_network(n_inputs, n_hidden, n_outputs):
    network = []
    hidden_layer = [{'weights': [random() for i in range(n_inputs + 1)],
                     'k': [random(), random()],
                     'delta': 0} for i in range(n_hidden)]
    network.append(hidden_layer)
    output_layer = [{'weights': [random() for i in range(n_hidden + 1)],
                     'k': [random(), random()],
                     'delta': 0} for i in range(n_outputs)]
    network.append(output_layer)
    return network

# Make a prediction with a network
def predict(network, row):
    outputs = forward_propagate(network, row)
    return outputs.index(max(outputs))

# Backpropagation Algorithm With Stochastic Gradient Descent
def back_propagation(train, test, l_rate, n_epoch, n_hidden):
    n_inputs = len(train[0]) - 1
    n_outputs = len(set([row[-1] for row in train]))
    network = initialize_network(n_inputs, n_hidden, n_outputs)
    train_network(network, train, l_rate, n_epoch, n_outputs)
    predictions = [predict(network, row) for row in test]
    return predictions

# Calculate F1-Score
def calculate_f1_score(actual, predicted):
    tp, fp, fn = 0, 0, 0
    for i in range(len(actual)):
        if actual[i] == 1:
            if predicted[i] == 1:
                tp += 1
            else:
                fn += 1
        else:
            if predicted[i] == 1:
                fp += 1
    precision = tp / (tp + fp)
    recall = tp / (tp + fn)
    f1_score = 2 * (precision * recall) / (precision + recall)
    return f1_score

# Learning rate scheduling
def learning_rate_schedule(initial_rate, epoch, decay_rate):
    return initial_rate / (1 + decay_rate * epoch)

# Train and Evaluate the Model
def train_and_evaluate_model(dataset, n_folds, l_rate, n_epoch, n_hidden):
    folds = cross_validation_split(dataset, n_folds)
    scores = []
    for fold in folds:
        train_set = list(folds)
        train_set.remove(fold)
        train_set = sum(train_set, [])
        test_set = list()
        for row in fold:
            row_copy = list(row)
            test_set.append(row_copy)
            row_copy[-1] = None
        predicted = back_propagation(train_set, test_set, l_rate, n_epoch, n_hidden)
        actual = [row[-1] for row in fold]
        accuracy = accuracy_met(actual, predicted)
        f1_score = calculate_f1_score(actual, predicted)
        print("Accuracy:", accuracy)
        print("F1-Score:", f1_score)
        scores.append(accuracy)
    mean_accuracy = sum(scores) / float(len(scores))
    print('Mean Accuracy: %.3f%%' % mean_accuracy)

# Test Backprop on Seeds dataset
seed(1)
filename = 'data.csv'
dataset = loadCsv(filename)
for i in range(len(dataset[0]) - 1):
    column_to_float(dataset, i)
column_to_int(dataset, len(dataset[0]) - 1)
minmax = [(min(column), max(column)) for column in zip(*dataset)]
normalize(dataset, minmax)

n_folds = 5
l_rate = 0.1
n_epoch = 1500
n_hidden = 4
train_and_evaluate_model(dataset, n_folds, l_rate, n_epoch, n_hidden)


---> Tried to increase the efficiency of the code by making some few changes in the code. 
---> Also adding that code.

  
from random import seed, randrange, random
import csv
import numpy as np
from math import exp
from sklearn.metrics import confusion_matrix, cohen_kappa_score, f1_score

# Load a CSV file
def loadCsv(filename):
    trainSet = []
    with open(filename, 'r') as file:
        lines = csv.reader(file)
        dataset = list(lines)
        for i in range(1, len(dataset)):  # Skip the header row
            for j in range(4):
                dataset[i][j] = float(dataset[i][j])
            trainSet.append(dataset[i])
    return trainSet

# Rescale dataset columns to the range 0-1
def normalize(dataset, minmax):
    for row in dataset:
        for i in range(len(row) - 1):
            row[i] = (row[i] - minmax[i][0]) / (minmax[i][1] - minmax[i][0])

# Convert string column to integer
def column_to_int(dataset, column):
    class_values = [row[column] for row in dataset]
    unique = set(class_values)
    lookup = dict()
    for i, value in enumerate(unique):
        lookup[value] = i
    for row in dataset:
        row[column] = lookup[row[column]]
    return lookup

# Split a dataset into k folds
def cross_validation_split(dataset, n_folds):
    dataset_split = []
    dataset_copy = list(dataset)
    fold_size = int(len(dataset) / n_folds)
    for i in range(n_folds):
        fold = []
        while len(fold) < fold_size:
            index = randrange(len(dataset_copy))
            fold.append(dataset_copy.pop(index))
        dataset_split.append(fold)
    return dataset_split

# Calculate accuracy percentage
def accuracy_met(actual, predicted):
    correct = 0
    for i in range(len(actual)):
        if actual[i] == predicted[i]:
            correct += 1
    return correct / float(len(actual)) * 100.0

# Calculate F1-Score
def f1score_met(actual, predicted):
    return f1_score(actual, predicted, average='weighted')

# Evaluate an algorithm using a cross-validation split
def run_algorithm(dataset, algorithm, n_folds, *args):
    folds = cross_validation_split(dataset, n_folds)
    scores_accuracy = []
    scores_f1score = []
    for fold in folds:
        train_set = list(folds)
        train_set.remove(fold)
        train_set = sum(train_set, [])
        test_set = list()
        for row in fold:
            row_copy = list(row)
            test_set.append(row_copy)
            row_copy[-1] = None
        predicted = algorithm(train_set, test_set, *args)
        actual = [row[-1] for row in fold]
        accuracy = accuracy_met(actual, predicted)
        f1score = f1score_met(actual, predicted)
        scores_accuracy.append(accuracy)
        scores_f1score.append(f1score)
    return scores_accuracy, scores_f1score

# Calculate neuron activation for an input
def activate(weights, inputs):
    activation = weights[-1]
    for i in range(len(weights) - 1):
        activation += weights[i] * inputs[i]
    return activation

# Transfer neuron activation
def transfer(activation, k0, k1):
    return k0 + k1 * activation

# Forward propagate input to a network output
def forward_propagate(network, row):
    inputs = row
    for layer in network:
        new_inputs = []
        for neuron in layer:
            activation = activate(neuron['weights'], inputs)
            if layer != network[-1]:
                neuron['output'] = transfer(activation, neuron['k'][0], neuron['k'][1])
            else:
                neuron['output'] = transfer(activation, neuron['k'][0], neuron['k'][1])
            new_inputs.append(neuron['output'])
        inputs = new_inputs
    return inputs

# Calculate the derivative of a neuron output
def transfer_derivative(output, k1):
    return k1

# Backpropagate error and store in neurons
def backward_propagate_error(network, expected):
    for i in reversed(range(len(network))):
        layer = network[i]
        errors = []
        if i != len(network) - 1:
            for j in range(len(layer)):
                error = 0.0
                for neuron in network[i + 1]:
                    error += (neuron['weights'][j] * neuron['delta'])
                errors.append(error)
        else:
            for j in range(len(layer)):
                neuron = layer[j]
                errors.append(expected[j] - neuron['output'])
        for j in range(len(layer)):
            neuron = layer[j]
            neuron['delta'] = errors[j] * transfer_derivative(neuron['output'], neuron['k'][1])

# Update network weights with error
def update_weights(network, row, l_rate):
    for i in range(len(network)):
        inputs = row[:-1]
        if i != 0:
            inputs = [neuron['output'] for neuron in network[i - 1]]
        for neuron in network[i]:
            for j in range(len(inputs)):
                temp = l_rate * neuron['delta'] * inputs[j]
                neuron['weights'][j] += temp
            temp = l_rate * neuron['delta']
            neuron['weights'][-1] += temp
            neuron['k'][0] += l_rate * neuron['delta']
            neuron['k'][1] += l_rate * neuron['delta'] * neuron['output']

# Train a network for a fixed number of epochs
def train_network(network, train, l_rate, n_epoch, n_outputs):
    for epoch in range(n_epoch):
        for row in train:
            outputs = forward_propagate(network, row)
            expected = [0 for i in range(n_outputs)]
            expected[int(row[-1])] = 1
            backward_propagate_error(network, expected)
            update_weights(network, row, l_rate)

# Initialize a network
def initialize_network(n_inputs, n_hidden, n_outputs):
    network = []
    hidden_layer = [{'weights': [random() for i in range(n_inputs + 1)],
                     'k': [random(), random()],
                     'delta': 0} for i in range(n_hidden)]
    network.append(hidden_layer)
    output_layer = [{'weights': [random() for i in range(n_hidden + 1)],
                     'k': [random(), random()],
                     'delta': 0} for i in range(n_outputs)]
    network.append(output_layer)
    return network

# Make a prediction with a network
def predict(network, row):
    outputs = forward_propagate(network, row)
    return outputs.index(max(outputs))

# Backpropagation Algorithm With Stochastic Gradient Descent
def back_propagation(train, test, l_rate, n_epoch, n_hidden):
    n_inputs = len(train[0]) - 1
    n_outputs = len(set([row[-1] for row in train]))
    network = initialize_network(n_inputs, n_hidden, n_outputs)
    train_network(network, train, l_rate, n_epoch, n_outputs)
    predictions = [predict(network, row) for row in test]
    return predictions

# Main function to test the updated code
if __name__ == "__main__":
    seed(1)
    filename = 'data.csv'
    dataset = loadCsv(filename)
    for i in range(len(dataset[0]) - 1):
        column_to_float(dataset, i)
    column_to_int(dataset, len(dataset[0]) - 1)
    minmax = [(min(column), max(column)) for column in zip(*dataset)]
    normalize(dataset, minmax)

    n_folds = 5
    l_rate = 0.1
    n_epoch = 1500
    n_hidden = 4
    scores_accuracy, scores_f1score = run_algorithm(dataset, back_propagation, n_folds, l_rate, n_epoch, n_hidden)
    mean_accuracy = sum(scores_accuracy) / float(len(scores_accuracy))
    mean_f1score = sum(scores_f1score) / float(len(scores_f1score))

    print('Accuracy:', scores_accuracy)
    print('Mean Accuracy: %.3f%%' % mean_accuracy)
    print('F1-Score:', scores_f1score)
    print('Mean F1-Score: %.3f' % mean_f1score)

